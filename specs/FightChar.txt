Service: FightChar 
refines: Character

Observators:

	notManipulable: [FightChar] -> bool
	isBlocking: [FightChar] → bool
	isBlockstunned: [FightChar] → bool
	isHitstunned: [FightChar] → bool
	isTeching: [FightChar] → bool
	tech: [FightChar] → Tech
		pre tech(C) requires isTeching(C)
	techFrame: [FightChar] → bool
		pre techFrame(C) requires isTeching(C)
	techHasAlreadyHit: [FightChar] → bool
		pre techHasAlreadyHit(C) requires isTeching(C)
Constructors:
	init: String × int × int × bool × Engine x RectangleHitbox → [FightChar]
		pre init(l,s,f,e,r) requires l > 0 ∧ s > 0

Operators: 

	startTech: [FightChar] × Tech → [FightChar]
		pre startTech(C,T) requires ¬isOutOfControl(C))
	jump :[FightChar]→ [FightChar]
		pre jump(C) require  ¬notManipulable(C)
	crouch:[FightChar]→ [FightChar]
		pre crouch(C) require ¬notManipulable(C)
	startBloking: [FightCharacter] -> [FightChar]
		pre startBloking(C) requires ¬isBloking(C) && ¬notManipulable(C) 


Observation:

[Invariant]
	isOutOfControl(C) =(min) isTeching(C) || isBlockstunned(C) || isHitStunned(C)

[init]:
	notManipulable(init(name,l, s, f, e, r)) = false ^ isBlocking(init(name,l, s, f, e, r)) = false ^ charBox(init(name,l, s, f, e, r)) = r
[jump]
	positionX(jump(C)) = positionX()
	positionY(jump(C)) = positionY()
[crouch]
	positionX(crouch(C)) = positionX()
	positionY(crouch(C)) = positionY()
[moveLeft]:
	(notManipulable() || isBlocking()) => positionX(moveLeft(C)) = positionX()
	
	( ∃i, char(engine(C), i) != C ∧ (!(notManipulable() || isBlocking())) ∧  collisionwith(charBox(moveLeft(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveLeft(C)) = positionX(C)

	(!(notManipulable() || isBlocking())) ∧ positionX(C) ≤ speed(C)∧(∀i, char(engine(C), i) != C ⇒ ¬collisionwith(charBox(moveLeft(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveLeft(C)) = 0

	(!(notManipulable() || isBlocking())) ∧ positionX(C) > speed(C)∧(∀i, char(engine(C), i) != C ⇒ ¬collisionwith(charBox(moveLeft(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveLeft(C)) = positionX(C) − speed(C)

	faceRight(moveLeft(C)) = faceRight(C) ∧ life(moveLeft(C)) = life(C)

	positionY(moveLeft(C)) = positionY(C)

[moveRight]:
	(notManipulable() || isBlocking()) => positionX(moveRight(C)) = positionX()(∃i, char(engine(C), i) != C ∧ collisionwith(charBox(moveRight(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveRight(C)) = positionX(C)

	(!(notManipulable() || isBlocking()))∧ positionX(C) ≤ width(engine(C))-speed(C)∧(∀i, char(engine(C), i) != C ⇒ ¬collisionwith(charBox(moveRight(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveLeft(C)) =positionX(C)+speed(C)

	(!(notManipulable() || isBlocking()))∧ positionX(C) > width(engine(C))-speed(C)∧(∀i, char(engine(C), i) != C ⇒ ¬collisionwith(charBox(moveLeft(C)), charBox(char(engine(C), i))))
	⇒ positionX(moveLeft(C)) =width(engine(C) - width(charBox()))

	faceRight(moveRight(C)) = faceRight(C) ∧ life(moveRight(C)) = life(C)

	positionY(moveRight(C)) = positionY(C)
[startBloking]
	isBloking = false;
[switchSide]
	faceRight(switchSide(C)) != faceRight(C)
	positionX(switchSide(C)) = positionX(C)
	positionY(switchSide(C)) = positionY(C)
	
[step]
	step(C, LEFT) = moveLeft(C)
	step(C, RIGHT) = moveRight(C)
	step(C, NEUTRAL) = C
	step(C, JUMP) = jump(C)
	step(C, CROUCH) = crouch(C)
	
