Service:Engine
Types:bool,int,Commande={LEFT, RIGHT, CROUCH, JUMP, NEUTRAL, TECH_1, TECH_2, PROTECT}

Observators:
	const height: [Engine] → int
	const width: [Engine] → int
	char: [Engine] × int → Character
	pre char(E,i) requires i ∈ {1, 2}
	player: [Engine] × int → Player
	pre player(E,i) requires i ∈ {1, 2}
	gameOver: [Engine] → bool

Constructors: 
	init: int × int × int × Player × Player → [Engine]
		pre init(h,w,s,p1,p2) requires h > 0 ∧ s > 0 ∧ w > s ∧ p1 != p2

Operators:

step: [Engine] × Commande × Commande → [Engine]
	pre step(E) requires ¬gameOver(E)

Observations:

[invariant]:
	gameOver(E) = ∃i ∈ {1, 2} Character::dead(player(E, i))
	Character::positionX(char(E,1)) < Character::positionX(char(E,2)) ⇒ Character::faceRight(char(E,1)) ^ !Character::faceRight(char(E,1))

	Character::positionX(char(E,1)) >= Character::positionX(char(E,2)) ⇒ !Character::faceRight(char(E,1)) ^ Character::faceRight(char(E,1))

[init]:
	height(init(h, w, s, p1, p2)) = h
	width(init(h, w, s, p1, p2)) = w
	player(init(h, w, s, p1, p2), 1) = p1
	player(init(h, w, s, p1, p2), 2) = p2
	Character::positionX(char(init(h, w, s, p1, p2), 1)) = w/2 − s/2
	Character::positionX(char(init(h, w, s, p1, p2), 2)) = w/2 + s/2
	Character::positionY(char(init(h, w, s, p1, p2), 1)) = 0
	Character::positionY(char(init(h, w, s, p1, p2), 2)) = 0
	Character::faceRight(char(init(h, w, s, p1, p2), 1))
	Character::¬faceRight(char(init(h, w, s, p1, p2), 2))

[step]:
	char(step(E, C1, C2), 1) = Character::step(char(E, 1), C1)
	char(step(E, C1, C2), 2) = Character::step(char(E, 2), C2)
